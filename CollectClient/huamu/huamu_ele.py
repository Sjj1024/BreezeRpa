import pandas as pd
import numpy as np
from petal import Task
from mdt_util.const import SRS
from petal_tasks.collector_tools.collector_utils import get_template_client_base


class HuaMuEle(Task):
  """
  花木电梯信息
  """

  def run(self):
    source_df = get_template_client_base(template_uuid="d9c723a2-5ac5-4c13-a082-8e5f037a9718").data_select(to_df=True)
    data_ele = get_template_client_base(template_uuid="131da8d4-359e-496f-a29b-90e3088c28d2")
    target_df = data_ele.data_select(to_df=True)
    target_df["下次检验日期"] = target_df["下次检验日期"].replace(np.nan, 0).replace(np.inf, 0)
    target_df["下次检验日期"] = target_df["下次检验日期"].astype("int").replace(0, np.nan)
    target_df["安装日期"] = target_df["安装日期"].replace(np.nan, 0).replace(np.inf, 0)
    target_df["安装日期"] = target_df["安装日期"].astype("int").replace(0, np.nan)
    res_inner, res_other = self.trans_inner_data(source_df, target_df)
    if not res_inner.empty:
      res_inner = data_ele.df_drop_columns(res_inner, is_extra=False)
      res_inner = self.new_etl().from_df(res_inner).geocode(addr="安装地址", c_lng="经度", c_lat="纬度",
                                                            srs=SRS.wgs84).returns()
      res_inner["安装地址"] = res_inner["安装地址"].apply(lambda x: x.replace("上海市浦东新区", ""))
      data_ele.data_update_separate(res_inner)
    if not res_other.empty:
      res_other = data_ele.df_drop_columns(res_other, is_extra=True)
      res_other = self.new_etl().from_df(res_other).geocode(addr="安装地址", c_lng="经度", c_lat="纬度",
                                                            srs=SRS.wgs84).returns()
      res_other["安装地址"] = res_other["安装地址"].apply(lambda x: x.replace("上海市浦东新区", ""))
      data_ele.data_create(res_other, df_drop_columns=True)

  def trans_inner_data(self, source_df, target_df):
    """
    对数据进行转化
    匹配到的数据进行修改
    没匹配到的数据进行追加
    """
    source_data = source_df.rename(columns={"名称": "设备注册代码"})
    res_inner = target_df
    if not target_df.empty:
      res_inner = pd.merge(source_data, target_df, on=["设备注册代码"], how="inner", suffixes=("_s", "_t"))
      res_inner = res_inner.rename(columns={"使用单位_t": "使用单位",
                                            "使用状态_t": "使用状态",
                                            "制造单位_t": "制造单位",
                                            "安装地址_t": "安装地址",
                                            "详细地址_t": "详细地址",
                                            "检验结论_t": "检验结论",
                                            "乡镇(街道)_t": "乡镇(街道)",
                                            "下次检验日期_t": "下次检验日期",
                                            "检验责任所在单位_t": "检验责任所在单位",
                                            "设备名称（型号）_t": "设备名称（型号）",
                                            "下次自检测日期_t": "下次自检测日期",
                                            "id_t": "id",
                                            "update_time_t": "update_time",
                                            "create_time_t": "create_time"})
      res_inner = res_inner.apply(self.change_data_format, axis=1)
    source_data = source_data.append(target_df)
    source_data = source_data.append(target_df)
    res_other = source_data.drop_duplicates(subset=["设备注册代码"], keep=False)
    if not res_other.empty:
      res_other["乡镇(街道)"] = "花木街道"
      res_other = res_other.rename(columns={"维保单位名称": "维保单位"})
      res_other["详细地址"] = res_other["安装地址"]
      res_other["安装地址"] = res_other["安装地址"].apply(self.trans_dz)
      res_other = res_other.apply(self.change_new_data, axis=1)
    return res_inner, res_other

  def change_data_format(self, row):
    """
    对匹配到的行数据进行组装
    """
    history = {"检验日期": row.get("下次检验日期", 0) if pd.notna(row.get("下次检验日期", 0)) else 0,
               "检验结论": row.get("检验结论", "") if pd.notna(row.get("检验结论", "")) else "",
               "检验责任所在单位": row.get("检验责任所在单位", "") if pd.notna(row.get("检验责任所在单位", "")) else "",
               "检验责任所在单位联系方式": row.get("检验责任所在单位联系方式", "") if pd.notna(row.get("检验责任所在单位联系方式", "")) else ""}
    if isinstance(row.get("历史检验信息"), list):
      row["历史检验信息"].append(history)
    else:
      row["历史检验信息"] = [history]
    if row.get("重点监控") == "否":
      row["重点监控"] = False
    else:
      row["重点监控"] = True
    row["安装地址"] = self.trans_dz(row.get("安装地址"))
    return row

  def change_new_data(self, row):
    """
    对新数据进行品牌类型映射和用途映射
    """
    row["设备名称（型号）"] = self.name_type(row["设备名称（型号）"])
    row["品牌类型"] = self.make_pinpai(row["制造单位"])
    # 先判断小类，再判断类型
    if "用途小类" in row and not np.isnan(row["用途小类"]):
      row["用途大类"], row["用途中类"] = self.get_big_mid(row["用途小类"])
    else:
      row["用途大类"], row["用途中类"] = self.get_big_mid(row["设备名称（型号）"])
    return row

  def loc_change(self, loc):
    if '弄' in loc:
      if '路' in loc:
        if loc.index("弄") > loc.index("路"):
          a1 = loc.partition("弄")
          ends = ""
          if len(a1) >= 3:
            ends = "".join(a1[2].partition('号')[:2])
          res = "".join(a1[:2]) + ends
          return res
      elif '道' in loc:
        return self.bj_func('弄', '道', loc)
    elif '号' in loc:
      if '路' in loc:
        return self.bj_func('号', '路', loc)
      elif '道' in loc:
        return self.bj_func('号', '道', loc)
    return loc

  def bj_func(self, word1, word2, loc):
    """
    比较函数，保留‘号’在后面的字符，同时取前面部分
    """
    if loc.index(word1) > loc.index(word2):
      a1 = loc.partition(word1)
      a_a = [a1[0], a1[1]]
      return ''.join(a_a)

  def del_ts(self, loc):
    del_list = ['苑', '园', '源', '庭', '第', '期', '区', '厦', ')', '市', '浦东', '花木镇', ' ']
    for o in del_list:
      if loc is not None and o in loc:
        loc = loc.rsplit(o)[1]
    return loc

  def trans_dz(self, loc):
    if loc.startswith("上海市浦东新区"):
      return loc
    if '杨高南路严家桥' not in loc and '东北角' not in loc and loc and '站' not in loc:
      loc = self.loc_change(loc)
      if loc:
        loc = self.del_ts(loc)
      if loc:
        res_list = [str(int(i)) if i.isdigit() else i for i in loc]
        loc = "".join(res_list)
    loc = "上海市浦东新区" + loc
    return loc

  def make_pinpai(self, name):
    """
    制造单位-品牌类型映射
    """
    make_pinpai = {
      "OTIS电梯（中国）有限公司": "奥的斯",
      "奥的斯电梯(中国)有限公司": "奥的斯",
      "奥的斯电梯(中国）有限公司": "奥的斯",
      "奥的斯电梯（中国)有限公司": "奥的斯",
      "奥的斯电梯（中国）有限公司": "奥的斯",
      "奥的斯机电电梯有限公司": "奥的斯",
      "北京北创恒基电梯有限公司": "北创恒基",
      "北京捷特达电梯有限公司": "捷特达",
      "北京荣茂欣捷电梯有限公司": "荣茂欣捷",
      "波士顿电梯（苏州）有限公司": "波士顿",
      "大连LG电梯有限公司": "星玛",
      "大连星玛电梯公司": "星玛",
      "大连星玛电梯有限公司": "星玛",
      "德国OTIS": "奥的斯",
      "德国OTIS电梯有限公司": "奥的斯",
      "德国奥的斯": "奥的斯",
      "德国蒂森": "蒂森克虏伯",
      "蒂森电梯有限公司": "蒂森克虏伯",
      "蒂森电梯有限公司上海分公司": "蒂森克虏伯",
      "蒂森克虏伯电梯(上海)有限公司": "蒂森克虏伯",
      "蒂森克虏伯电梯（上海）有限公司": "蒂森克虏伯",
      "蒂森克虏伯电梯有限公司": "蒂森克虏伯",
      "东南电梯股份有限公司": "东南",
      "东芝电梯(上海)有限公司": "东芝",
      "东芝电梯（沈阳）有限公司": "东芝",
      "东芝电梯(中国)有限公司": "东芝",
      "东芝电梯（中国）有限公司": "东芝",
      "法国OTIS": "奥的斯",
      "房屋设备厂": "房屋设备",
      "广东蒂森电梯有限公司": "蒂森克虏伯",
      "广州OTIS电梯有限公司": "奥的斯",
      "广州奥的斯电梯有限公司": "奥的斯",
      "广州广日电梯工程有限公司": "广日",
      "广州广日电梯有限公司": "广日",
      "广州日立电梯有限公司": "日立",
      "悍马电梯（上海）有限公司": "悍马",
      "杭州奥立达电梯有限公司": "奥立达",
      "杭州霍普曼电梯制造有限公司": "霍普曼",
      "杭州西奥电梯有限公司": "西奥",
      "杭州西子OTIS电梯有限公司": "西子奥的斯",
      "河北博菱电梯有限公司": "博菱",
      "恒达富士电梯有限公司": "恒达富士",
      "湖州奥特电梯有限公司": "奥特",
      "湖州中菱电梯有限公司": "中菱",
      "沪西电梯厂": "沪西",
      "华升富士达电梯有限公司": "华升富士达",
      "佳登曼电梯有限公司": "佳登曼",
      "江都市誉美电梯厂": "誉美",
      "江南嘉捷电梯股份有限公司": "江南嘉捷",
      "江苏伯爵电梯股份有限公司": "伯爵",
      "江阴市电梯厂": "江阴电梯",
      "进口OTIS": "奥的斯",
      "进口奥的斯": "奥的斯",
      "进口日立": "日立",
      "进口三菱": "三菱",
      "巨人电梯有限公司": "巨人",
      "巨人通力电梯有限公司": "巨人通力",
      "溧阳立达电梯有限公司": "立达",
      "联盟电梯（苏州）有限公司": "联盟",
      "辽宁东奥电梯有限公司": "东奥",
      "辽宁东旭电梯有限公司": "东旭",
      "美国OTIS": "奥的斯",
      "浦东电梯厂": "浦东电梯",
      "日本OTIS": "奥的斯",
      "日本东芝": "东芝",
      "日本日立": "日立",
      "日本三菱": "三菱",
      "日本三菱电梯公司": "三菱",
      "日本三菱电梯有限公司": "三菱",
      "日立电梯(中国)有限公司": "日立",
      "日立电梯（中国）有限公司": "日立",
      "瑞士迅达电梯有限公司": "讯达",
      "赛奥智能电梯（苏州）有限公司": "赛奥智能",
      "三菱电机上海机电电梯有限公司": "三菱",
      "三菱电机株式会社": "三菱",
      "三菱电梯有限公司": "三菱",
      "三菱电梯株式会社": "三菱",
      "森赫电梯股份有限公司": "森赫",
      "上海": "",
      "上海阿尔法电梯工程有限公司": "阿尔法",
      "上海阿尔法电梯有限公司": "阿尔法",
      "上海爱登堡电梯工程安装有限公司": "爱登堡",
      "上海爱登堡电梯股份有限公司": "爱登堡",
      "上海爱登堡电梯集团股份有限公司": "爱登堡",
      "上海爱登堡电梯有限公司": "爱登堡",
      "上海奥的斯电梯有限公司": "奥的斯",
      "上海宝达电梯有限公司": "宝达",
      "上海达科电梯有限公司": "达科",
      "上海德奥电梯有限公司": "德奥",
      "上海德圣米高电梯有限公司": "德圣米高",
      "上海东亚电梯厂": "东亚",
      "上海东芝电梯有限公司": "东芝",
      "上海房屋设备厂": "房屋设备",
      "上海房屋设备工程公司": "房屋设备",
      "上海房屋设备有限公司": "房屋设备",
      "上海富士电梯有限公司": "富士",
      "上海固崮电梯有限公司": "固崮",
      "上海沪西电梯厂": "沪西",
      "上海华蒂电梯有限公司": "华蒂",
      "上海华立电梯厂": "华立",
      "上海华立电梯工程有限公司": "华立",
      "上海华立电梯公司": "华立",
      "上海华立电梯有限公司": "华立",
      "上海华立特种电梯厂": "华立",
      "上海建筑装饰机械厂": "上海建筑装饰",
      "上海靓逸电梯有限公司": "靓逸",
      "上海巨力电梯有限公司": "巨力",
      "上海康驰机电设备有限公司": "康驰机电",
      "上海康驰机电设备有限公司合肥分公司": "康驰机电",
      "上海康驰机电设备有限公司合肥分公司(合肥分公司)": "康驰机电",
      "上海立扶特电梯有限公司": "立扶特",
      "上海民力电梯厂": "民力",
      "上海南洋电器厂": "南洋电器",
      "上海鹏阳电梯有限公司": "鹏阳",
      "上海浦东开灵电梯厂": "浦东开灵",
      "上海启祥载物电梯有限公司": "启祥载物",
      "上海轻建电梯有限公司": "轻建",
      "上海轻建房屋设备厂": "轻建",
      "上海瑞生电梯有限公司": "瑞生",
      "上海三菱电梯有公司": "三菱",
      "上海三菱电梯有限公司": "三菱",
      "上海三菱电梯有限公司安装维修分公司": "三菱",
      "上海三荣电梯有限公司": "三荣",
      "上海三荣有限公司": "三荣",
      "上海三胜康恩得电梯有限公司": "三胜康恩得",
      "上海三盛康恩得电梯有限公司": "三胜康恩得",
      "上海三意楼宇实业有限公司": "三意楼宇",
      "上海台安电梯有限公司": "台安",
      "上海台菱电梯有限公司": "台菱",
      "上海特种电梯厂": "上海特种",
      "上海通力电梯有限公司": "通力",
      "上海统一精工机械有限公司": "统一精工",
      "上海托泰电梯有限公司": "托泰",
      "上海万甚电梯有限公司": "万甚",
      "上海伟达电梯有限公司": "伟达",
      "上海吴淞教具厂": "吴淞",
      "上海现代电梯工程有限公司": "现代电梯",
      "上海现代电梯有限公司": "现代电梯",
      "上海现代电梯制造有限公司": "现代电梯",
      "上海新时达电梯安装有限公司": "新时达",
      "上海新时达电梯有限公司": "新时达",
      "上海永大电梯设备有限公司": "永大",
      "上海永大电梯设备有限公司安装维修分公司": "永大",
      "上海永大电梯有限公司": "永大",
      "上海永大机电工业有限公司": "永大",
      "上海永大机电设备有限公司": "永大",
      "上海长江电梯有限公司": "长江",
      "上海振兴电梯厂": "振兴",
      "上海知秋电梯有限公司": "知秋",
      "上海中骋电梯有限公司": "中骋",
      "上海中迅赛勒瓦电梯厂": "中迅赛勒瓦",
      "上海中迅赛勒瓦电梯有限公司": "中迅赛勒瓦",
      "上海中业电梯有限公司": "中业",
      "上海住宅电梯厂": "上海住宅",
      "司": "",
      "苏州奥思玛电梯有限公司": "奥思玛",
      "苏州德奥电梯有限公司": "德奥",
      "苏州迪欧达电梯有限公司": "迪欧达",
      "苏州迪欧电梯有限公司": "迪欧",
      "苏州帝奥电梯有限公司": "帝奥",
      "苏州东南电梯(集团)有限公司": "东南",
      "苏州富士佳电梯有限公司": "富士佳",
      "苏州富士精工电梯有限公司": "富士精工",
      "苏州江南快速电梯有限公司": "江南快速",
      "苏州科达液压电梯有限公司": "科达液压",
      "苏州快速电梯有限公司": "快速",
      "苏州铃木电梯有限公司": "铃木",
      "苏州赛奥智能电梯有限公司": "赛奥智能",
      "苏州神州快速电梯有限公司": "神州快速",
      "苏州迅达电梯有限公司": "讯达",
      "苏州中威法奥电梯有限公司": "中威法奥",
      "天": "",
      "天津OTIS电梯有限公司": "奥的斯",
      "天津奥的斯电梯有限公司": "奥的斯",
      "通力电梯有限公司": "通力",
      "通用电梯股份有限公司": "通用",
      "沃克斯电梯（中国）有限公司": "沃克斯",
      "无锡市蓝菱电梯有限公司": "蓝菱",
      "西继迅达（许昌）电梯有限公司": "西继迅达",
      "西子OTIS电梯有限公司": "西子奥的斯",
      "西子奥的电梯有限公司": "西子奥的斯",
      "西子奥的斯电梯有限公司": "西子奥的斯",
      "西子电梯科技有限公司": "西子",
      "迅达(中国)电梯有限公司": "讯达",
      "迅达（中国)电梯有限公司": "讯达",
      "迅达（中国）电梯有限公司": "讯达",
      "迅达（中国）电梯有限公司上海分公司": "讯达",
      "迅达电梯有限公司": "讯达",
      "迅达中国电梯有限公司": "讯达",
      "扬州市捷达电梯有限公司": "捷达",
      "杨州派利尔电梯有限公司": "派利尔",
      "杨州市捷达电梯有限公司": "捷达",
      "杨州市捷在电梯有限公司": "捷在",
      "永大电梯设备(中国)有限公司": "永大",
      "永大电梯设备（中国）有限公司": "永大",
      "永大机电工业公司": "永大",
      "永大机电工业有限公司": "永大",
      "浙江富控电梯有限公司": "富控",
      "浙江恒达富士电梯有限公司": "恒达富士",
      "浙江联合电梯有限公司": "联合",
      "浙江南奥电梯有限公司": "南奥",
      "浙江西屋电梯股份有限公司": "西屋",
      "浙江亿能电梯有限公司": "亿能",
      "振兴电梯厂": "振兴",
      "中国迅达电梯有限公司": "讯达",
      "中国迅达电梯有限公司上海电梯厂": "讯达",
      "中迅电梯有限公司": "中迅",
      "中迅赛勒瓦电梯厂": "中迅赛勒瓦",
      "中迅赛勒瓦电梯有限公司": "中迅赛勒瓦",
      "中迅上海电梯厂": "中迅"
    }
    return make_pinpai.get(name, "")

  def name_type(self, name):
    """
    设备名称-类型映射表
    """
    name_type = {
      "300P": "箱式客梯",
      "3100R": "箱式客梯",
      "506NCE": "自动扶梯",
      "506NCE自动扶梯": "自动扶梯",
      "AS": "箱式客梯",
      "DLS": "箱式客梯",
      "EDL-508MP-VF": "观光客梯",
      "GENZ": "",
      "GPS-CR": "宅梯",
      "GPS-III": "观光客梯",
      "GVF": "宅梯",
      "HOPE": "箱式客梯",
      "NPE513-S": "自动扶梯",
      "NT-VF": "箱式客梯",
      "OTIS3200": "箱式客梯",
      "PW10/10": "箱式客梯",
      "S001": "",
      "TOEC-3": "箱式客梯",
      "TWJ200/0.4-AS": "箱式客梯",
      "VF": "箱式客梯",
      "XPM-PC": "箱式客梯",
      "病床电梯": "病床电梯",
      "陈东林": "",
      "乘客电梯": "箱式客梯",
      "乘客电梯PW10/16": "箱式客梯",
      "电梯": "箱式客梯",
      "电梯3100": "箱式客梯",
      "电梯3100R2": "箱式客梯",
      "电梯506NCE": "自动扶梯",
      "电梯9300": "自动扶梯",
      "电梯DLS": "",
      "电梯GPS-II": "箱式客梯",
      "电梯GVF": "宅梯",
      "电梯LS-2": "",
      "电梯OTIS3200": "箱式客梯",
      "电梯TKJ-GPS-II": "箱式客梯",
      "电梯TKYE-JXW": "箱式客梯",
      "电梯VFG100": "箱式客梯",
      "电梯YGVF": "箱式客梯",
      "观光客梯": "观光客梯",
      "观光电梯": "观光客梯",
      "观光客梯2000VF": "观光客梯",
      "货梯": "箱式货梯",
      "货梯JX-PC": "箱式货梯",
      "货梯SZ": "箱式货梯",
      "货梯XH": "箱式货梯",
      "客梯": "箱式客梯",
      "客梯E311": "箱式客梯",
      "客梯e'NT": "箱式客梯",
      "客梯HOPE": "箱式客梯",
      "客梯PW13/10": "箱式客梯",
      "客梯SPTR": "箱式客梯",
      "客梯SP-VF": "箱式客梯",
      "客梯SP-VFD": "箱式客梯",
      "客梯TKY630/0.63": "箱式客梯",
      "汽车电梯": "汽车电梯",
      "无机房电梯": "箱式客梯",
      "无机房货梯": "箱式货梯",
      "无机房客梯": "箱式客梯",
      "消防电梯": "消防电梯",
      "曳引驱动乘客电梯": "箱式客梯",
      "曳引驱动载货电梯": "箱式货梯",
      "曳引式货梯": "箱式货梯",
      "曳引式客梯": "箱式客梯",
      "曳引式客梯GPS-CR": "箱式客梯",
      "曳引式客梯GPS-III": "箱式客梯",
      "曳引式客梯GVF": "箱式客梯",
      "曳引式客梯HOPE": "箱式客梯",
      "曳引式杂物电梯": "杂物电梯",
      "液压电梯": "箱式客梯",
      "液压货梯": "箱式货梯",
      "液压客梯": "箱式客梯",
      "液压客梯TKY2000": "箱式客梯",
      "杂物电梯": "杂物电梯",
      "杂物电梯JZW-AS": "杂物电梯",
      "宅梯GVF": "宅梯",
      "宅梯-GVF": "宅梯",
      "自动扶梯": "自动扶梯",
      "自动扶梯506NCE": "自动扶梯",
      "自动扶梯JS-LB": "自动扶梯",
      "自动扶梯S9300": "自动扶梯",
      "自动人行道": "自动人行道",
      "自动人行道RSV-TV": "自动人行道"
    }
    return name_type.get(name, "")

  def get_big_mid(self, name):
    """
    获取使用大类，中类
    """
    ele_dict = {
      "客梯": {
        "箱式客梯": [],
        "观光客梯": [],
        "自动电梯": ["自动扶梯", "自动人行道"],
        "其他客梯": ["病床电梯", "宅梯"]
      },
      "货梯": {
        "箱式货梯": [],
        "其他货梯": ["杂物电梯", "汽车电梯"]
      },
      "其他": {
        "消防电梯": []
      }
    }
    for b_key in ele_dict:
      m_dict = ele_dict.get(b_key)
      if name in m_dict.keys():
        return b_key, name
      for m_key in m_dict:
        s_list = m_dict.get(m_key)
        if name in s_list:
          return b_key, m_key
    return "其他", "其他货梯"
